Title: First Post
Author: Joshua Zou
Date: 2016-06-08 20:00
Category: Ipython Notebook
Tags: python firsts
Comment: true
Jiathis: true
Slug: 1253414
Summary: My first post, read it to find out.



{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(u'\\u539f\\u59cb\\u5e8f\\u5217\\u7684ADF\\u68c0\\u9a8c\\u7ed3\\u679c\\u4e3a\\uff1a', (-2.5413334658275089, 0.1057385300637993, 12L, 65L, {'5%': -2.9071540828402367, '1%': -3.5352168748293127, '10%': -2.5911025443786984}, 1641.0263487055679))\n",
      "(u'\\u5dee\\u5206\\u5e8f\\u5217\\u7684ADF\\u68c0\\u9a8c\\u7ed3\\u679c\\u4e3a\\uff1a', (-2.2684605826684034, 0.18234186709265726, 12L, 64L, {'5%': -2.907887369384766, '1%': -3.53692771987915, '10%': -2.5914932910156252}, 1617.2381609618906))\n",
      "(u'\\u5dee\\u5206\\u5e8f\\u5217\\u7684\\u767d\\u566a\\u58f0\\u68c0\\u9a8c\\u7ed3\\u679c\\u4e3a\\uff1a', (array([ 18.25118796]), array([  1.93605166e-05])))\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "attempt to get argmin of an empty sequence",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-09e8b7f559cd>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     81\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     82\u001b[0m \u001b[1;31m#先用stack展平，然后用idxmin找出最小值位置。\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 83\u001b[1;33m \u001b[0mp\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mq\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbic_matrix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0midxmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     84\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     85\u001b[0m \u001b[1;32mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34mu'BIC最小的p值和q值为：%s、%s'\u001b[0m \u001b[1;33m%\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mp\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mq\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda2\\lib\\site-packages\\pandas\\core\\series.pyc\u001b[0m in \u001b[0;36midxmin\u001b[1;34m(self, axis, skipna, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1244\u001b[0m         \"\"\"\n\u001b[0;32m   1245\u001b[0m         \u001b[0mskipna\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_argmin_with_skipna\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mskipna\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1246\u001b[1;33m         \u001b[0mi\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnanops\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnanargmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_values_from_object\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mskipna\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1247\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mi\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1248\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mD:\\Anaconda2\\lib\\site-packages\\pandas\\core\\nanops.pyc\u001b[0m in \u001b[0;36mnanargmin\u001b[1;34m(values, axis, skipna)\u001b[0m\n\u001b[0;32m    468\u001b[0m     values, mask, dtype, _ = _get_values(values, skipna, fill_value_typ='+inf',\n\u001b[0;32m    469\u001b[0m                                          isfinite=True)\n\u001b[1;32m--> 470\u001b[1;33m     \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    471\u001b[0m     \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_maybe_arg_null_out\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mskipna\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    472\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: attempt to get argmin of an empty sequence"
     ]
    }
   ],
   "source": [
    "#-*- coding: utf-8 -*-\n",
    "#arima时序模型\n",
    "import pandas as pd\n",
    "\n",
    "#参数初始化\n",
    "myfile='C:\\Users\\Administrator\\Desktop\\lnyd.xlsx'\n",
    "forecastnum = 5\n",
    "\n",
    "#读取数据，指定日期列为指标，Pandas自动将“日期”列识别为Datetime格式\n",
    "data=pd.read_excel(myfile,index_col=u\"时间\")\n",
    "#时序图\n",
    "import matplotlib.pyplot as plt\n",
    "#用来正常显示中文标签\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "\n",
    "#用来正常显示负号\n",
    "plt.rcParams['axes.unicode_minus'] = False \n",
    "data.plot()\n",
    "plt.show()\n",
    "\n",
    "#自相关图\n",
    "from statsmodels.graphics.tsaplots import plot_acf\n",
    "plot_acf(data).show()\n",
    "\n",
    "#平稳性检测\n",
    "from statsmodels.tsa.stattools import adfuller as ADF\n",
    "print(u'原始序列的ADF检验结果为：', ADF(data[u'全社会用电量本期值(万千瓦时)']))\n",
    "#返回值依次为adf、pvalue、usedlag、nobs、critical values、icbest、regresults、resstore\n",
    "\n",
    "D_data = data.diff().dropna()\n",
    "D_data.columns = [u'全社会用电量本期值(万千瓦时)']\n",
    "\n",
    "#时序图\n",
    "D_data.plot() \n",
    "plt.show()\n",
    "\n",
    "#自相关图\n",
    "plot_acf(D_data).show() \n",
    "plt.show()\n",
    "\n",
    "\n",
    "from statsmodels.graphics.tsaplots import plot_pacf\n",
    "\n",
    "\n",
    "#偏自相关图\n",
    "plot_pacf(D_data).show()\n",
    "\n",
    "#平稳性检测\n",
    "print(u'差分序列的ADF检验结果为：', ADF(D_data[u'全社会用电量本期值(万千瓦时)'])) \n",
    "\n",
    "#白噪声检验\n",
    "from statsmodels.stats.diagnostic import acorr_ljungbox\n",
    "#返回统计量和p值\n",
    "print(u'差分序列的白噪声检验结果为：', acorr_ljungbox(D_data, lags=1))\n",
    "\n",
    "\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "#定阶\n",
    "#一般阶数不超过length/10\n",
    "pmax = int(len(D_data)/10) \n",
    "\n",
    "\n",
    "#一般阶数不超过length/10\n",
    "qmax = int(len(D_data)/10) \n",
    "\n",
    "\n",
    "#bic矩阵\n",
    "bic_matrix = [] \n",
    "for p in range(pmax+1):\n",
    "  tmp = []\n",
    "  for q in range(qmax+1):\n",
    "#存在部分报错，所以用try来跳过报错。\n",
    "    try: \n",
    "      tmp.append(ARIMA(data, (p,1,q)).fit().bic)\n",
    "    except:\n",
    "      tmp.append(None)\n",
    "  bic_matrix.append(tmp)\n",
    "\n",
    "#从中可以找出最小值\n",
    "bic_matrix = pd.DataFrame(bic_matrix) \n",
    "\n",
    "#先用stack展平，然后用idxmin找出最小值位置。\n",
    "p,q = bic_matrix.stack().idxmin() \n",
    "\n",
    "print(u'BIC最小的p值和q值为：%s、%s' %(p,q)) \n",
    "\n",
    "#取BIC信息量达到最小的模型阶数，结果p为0，q为1，定阶完成。\n",
    "\n",
    "\n",
    " #建立ARIMA(0, 1, 1)模型\n",
    "model = ARIMA(data, (p,1,q)).fit() \n",
    "#给出一份模型报告\n",
    "model.summary2() \n",
    "\n",
    "\n",
    "#作为期5天的预测，返回预测结果、标准误差、置信区间。\n",
    "model.forecast(5) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
