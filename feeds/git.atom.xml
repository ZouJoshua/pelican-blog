<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Joshua's Blog - Git</title><link href="/" rel="alternate"></link><link href="/feeds/git.atom.xml" rel="self"></link><id>/</id><updated>2017-07-17T10:00:00+08:00</updated><entry><title>将本地项目上传到Github</title><link href="/articles/1500367116/" rel="alternate"></link><published>2017-07-17T10:00:00+08:00</published><updated>2017-07-17T10:00:00+08:00</updated><author><name>Joshua</name></author><id>tag:None,2017-07-17:/articles/1500367116/</id><summary type="html">&lt;p&gt;My first post,read it to find out.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;将本地项目上传到Github&lt;/h1&gt;
&lt;p&gt;本次操作需要用到管理工具&lt;code&gt;Git&lt;/code&gt;，&lt;a href="https://git-scm.com/"&gt;点击下载&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;本地Git仓库设置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建Git配置文件。&lt;/p&gt;
&lt;p&gt;通过命令&lt;code&gt;git init&lt;/code&gt;把即将要上传的本地项目文件夹变成Git可管理的仓库，即创建该项目的本地版本库。你会发现你的文件下生成一个&lt;code&gt;.git&lt;/code&gt;文件夹，默认是隐藏文件。可通过&lt;code&gt;git status&lt;/code&gt;来查看你当前的状态。Git安装好之后，打开所要上传的项目文件夹，鼠标右键点击windows系统下选择&lt;code&gt;Git Bash Here&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="图片1" src="http://i.imgur.com/IL1rdhx.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;code&gt;git add .&lt;/code&gt;（.和add之间有空格）将当前所有文件添加到仓库上，仍可通过&lt;code&gt;git status&lt;/code&gt;来查看你当前的状态。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="图片2" src="http://i.imgur.com/UmgDwI5.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;git commit&lt;/code&gt;把项目提交到仓库，&lt;code&gt;-m&lt;/code&gt;后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;commit blog&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="图片3" src="http://i.imgur.com/CjcobJ0.png"&gt;&lt;/p&gt;
&lt;p&gt;本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;远程仓库Github设置&lt;/h2&gt;
&lt;p&gt;本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下，先在本地生成一&lt;code&gt;.ssh&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建SSH KEY，先查看本地是否有.ssh文件，有的话删掉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/.ssh
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入命令，生成.ssh，写你自己的邮箱&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-keygen -t rsa -C &lt;span class="s2"&gt;&amp;quot;your email@.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一直回车就可以，这样就表示成功了，会在C盘的用户目录的根目录下生成一个&lt;code&gt;.ssh&lt;/code&gt;文件，如果找不到，可以搜索一下，文件下会有&lt;code&gt;id_rsa&lt;/code&gt;与&lt;code&gt;id_rsa.pug&lt;/code&gt;两个文件。
&lt;img alt="图片4" src="http://i.imgur.com/1NknRPR.png"&gt;&lt;/p&gt;
&lt;p&gt;本地目录下生成的文件：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="图片5" src="http://i.imgur.com/YAGYPRi.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;为了避免与Github创建连接时出错，可以新建一个config文件，将以下代码复制进去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host github.com
User git
Hostname ssh.github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa
Port 443
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;登录Github，找到右上角的图标，打开点进里面的&lt;code&gt;Settings&lt;/code&gt;，再选中里面的&lt;code&gt;SSH and GPG KEYS&lt;/code&gt;，点击右上角的&lt;code&gt;New SSH key&lt;/code&gt;，然后&lt;code&gt;Title&lt;/code&gt;里面随便填，再把刚才&lt;code&gt;id_rsa.pub&lt;/code&gt;里面的内容复制到&lt;code&gt;Title&lt;/code&gt;下面的&lt;code&gt;Key&lt;/code&gt;内容框里面，最后点击&lt;code&gt;Add SSH key&lt;/code&gt;，这样就完成了SSH Key的加密。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="图片6" src="http://i.imgur.com/AxCcxg3.png"&gt;
5. 测试连接是否成功，下图表示访问成功&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ ssh -t git@github.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="图片7" src="http://i.imgur.com/DXkZk93.png"&gt;
6. 在Github上创建一个Git仓库。
    &lt;em&gt;此时如果你勾选了&lt;code&gt;Initialize this repository with a README&lt;/code&gt;（就是创建仓库的时候自动给你创建一个README文件），那么到了第8步你将本地仓库内容推送到远程仓库的时候就会报一个&lt;/em&gt;failed to push some refs to https://github.com/guyibang/TEST2.git&lt;em&gt;的错误,这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，解决方法见第8步。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="图片8" src="http://i.imgur.com/D71K5mn.png"&gt;
7. Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，注意origin后面加的是你Github上创建好的仓库的地址。根据创建好的Git仓库页面的提示，可以在本地blog仓库的命令行输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    $ git remote add origin https://github.com/ZouJoshua/pelican-blog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="图片9" src="http://i.imgur.com/4z7h5BP.png"&gt;
    解决办法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    先输入：$ git remote rm origin
    再输入：$ git remote add origin https://github.com/ZouJoshua/pelican-blog.git
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;关联好之后就可以把本地库的所有内容推送到远程仓库（也就是Github）上了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于新建的远程仓库是空的，所以要加上&lt;code&gt;-u&lt;/code&gt;这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时，推送时，会出现如下错误：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="图片10" src="http://i.imgur.com/9nh2vZb.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;这是由于新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并：

    $ git pull --rebase origin master
然后再`git push`，登录Github查看，就会将自己的项目上传到Github。
&lt;/pre&gt;&lt;/div&gt;</content><category term="blogs，git，linux"></category></entry></feed>